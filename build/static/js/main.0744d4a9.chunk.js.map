{"version":3,"sources":["components/Foods/FoodsAdd.jsx","components/Foods/FoodsDeleteButton.jsx","components/Foods/FoodsEditButton.jsx","components/Foods/FoodsList.jsx","components/Foods/Foods.jsx","components/Meals/Meals.jsx","components/Planning/Planning.jsx","components/Recipes/Recipes.jsx","components/Menu.jsx","components/Users.jsx","components/Form/Form.jsx","components/Foods/FoodsUpdate.jsx","App.js","serviceWorker.js","index.js"],"names":["FoodsAdd","getFoodsList","useState","food","setFood","inputValue","setInputValue","handleChange","event","preventDefault","target","name","value","newValue","console","log","useEffect","noValidate","autoComplete","htmlFor","id","type","onChange","protein","lipid","glucid","bran","calories","id_group","onClick","url","process","Axios","post","finally","addFood","defaultProps","PropTypes","func","FoodsDeleteButton","foodID","delete","deleteFood","FoodsEditButton","to","FoodsList","foodsList","foods","map","index","key","switcher","SwitchCategories","Foods","setFoodsList","get","then","response","data","Meals","Planning","Recipes","useContext","TestContext","allFoods","setAllFoods","foodQuantity","setFoodQuantity","getAllFoods","getOneFood","foodId","getFoodName","foodDetail","container","spacing","variant","gutterBottom","total","toFixed","calcFoodQuantity","Menu","User","allUsers","setAllUsers","getAllUsers","user","setUser","getOneUser","userId","energyConsuption","setEnergyConsuption","basalMetabolicRate","Math","pow","weight","height","age","dailyEnergyConsumption","activity","mb_rate","daily_energy","calcDailyEnergyConsumption","PLG","setPLG","DEC","proteins","lipids","glucids","calcLipGlucProt","userDetail","firstname","lastname","id_activity","id_goal","href","display","size","path","component","Form","children","FieldSet","Legend","text","Label","Input","placeholder","min","max","Select","Options","Button","node","FoodsUpdate","useParams","updateFood","put","alert","getFood","updatedFoodInfos","method","onSubmit","App","Users","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0744d4a9.chunk.js","sourcesContent":["// import core\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport Axios from \"axios\";\nimport PropTypes from \"prop-types\";\n\n// get props from FoodsList.jsx\nfunction FoodsAdd({ getFoodsList }) {\n    const [food, setFood] = useState({});\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const addFood = () => {\n        const url = `${process.env.REACT_APP_HOST}/foods`;\n        Axios.post(url, food).finally(() => getFoodsList());\n    };\n\n    // get inputs values\n    const handleChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n        const newValue = { ...inputValue, [name]: value };\n        console.log(name, value);\n        setInputValue(newValue);\n    };\n\n    useEffect(() => {\n        setFood(inputValue);\n    }, [inputValue]);\n\n    // Si foodIndex est undefined => setInputValue(newValue) sinon setInputValue(oldValue)\n\n    // Todos? faire un composant form et passer les props\n    return (\n        <Fragment>\n            {/* Todo <Form values={values} legend id name type onChange htmlFor .../> */}\n            <form noValidate autoComplete=\"off\">\n                <fieldset>\n                    <legend>Ajouter un aliment</legend>\n                    <label htmlFor=\"food name\">\n                        Name:\n                        <input\n                            id=\"food name\"\n                            name=\"name\"\n                            type=\"text\"\n                            value={inputValue.name}\n                            onChange={(event) => handleChange(event)}\n                        />\n                    </label>\n                    <label htmlFor=\"proteins\">\n                        {\" \"}\n                        Protéines:\n                        <input\n                            id=\"proteins\"\n                            name=\"protein\"\n                            type=\"number\"\n                            value={inputValue.protein}\n                            onChange={(event) => handleChange(event)}\n                        />\n                    </label>\n                    <label htmlFor=\"lipids\">\n                        {\" \"}\n                        Lipides:\n                        <input\n                            id=\"lipids\"\n                            name=\"lipid\"\n                            type=\"number\"\n                            value={inputValue.lipid}\n                            onChange={(event) => handleChange(event)}\n                        />\n                    </label>\n                    <label htmlFor=\"glucids\">\n                        {\" \"}\n                        Glucides:\n                        <input\n                            id=\"glucids\"\n                            name=\"glucid\"\n                            type=\"number\"\n                            value={inputValue.glucid}\n                            onChange={(event) => handleChange(event)}\n                        />\n                    </label>\n                    <label htmlFor=\"brans\">\n                        {\" \"}\n                        Fibres:\n                        <input\n                            id=\"brans\"\n                            name=\"bran\"\n                            type=\"number\"\n                            value={inputValue.bran}\n                            onChange={(event) => handleChange(event)}\n                        />\n                    </label>\n                    <label htmlFor=\"cals\">\n                        Calories:\n                        <input\n                            id=\"cals\"\n                            name=\"calories\"\n                            type=\"number\"\n                            value={inputValue.calories}\n                            onChange={(event) => handleChange(event)}\n                        />\n                    </label>\n                    <label htmlFor=\"category\">\n                        Catégorie:\n                        <select\n                            id=\"category\"\n                            name=\"id_group\"\n                            value={inputValue.id_group}\n                            onChange={(event) => handleChange(event)}\n                        >\n                            <option value=\"\">\n                                --Choisissez une catégorie--\n                            </option>\n                            <option value={1}>féculent</option>\n                            <option value={2}>animale</option>\n                            <option value={3}>végétale</option>\n                            <option value={4}>céréales</option>\n                            <option value={5}>légumineuse</option>\n                        </select>\n                    </label>\n                </fieldset>\n            </form>\n            <button type=\"submit\" onClick={() => addFood()}>\n                Ajouter\n            </button>\n        </Fragment>\n    );\n}\n\nFoodsAdd.propTypes = {\n    getFoodsList: PropTypes.func.isRequired,\n};\nFoodsAdd.defaultProps = {\n    getFoodsList: PropTypes.func,\n};\n\nexport default FoodsAdd;\n","// import core\nimport React from \"react\";\nimport Axios from \"axios\";\nimport PropTypes from \"prop-types\";\n\n// get props from FoodsList.jsx\nfunction FoodsDeleteButton({ getFoodsList, foodID }) {\n    const deleteFood = (foodID) => {\n        const url = `${process.env.REACT_APP_HOST}/foods/${foodID}`;\n        Axios.delete(url, foodID).finally(() => getFoodsList());\n    };\n    return <button onClick={() => deleteFood(foodID)}>X</button>;\n}\n\nFoodsDeleteButton.propTypes = {\n    getFoodsList: PropTypes.func.isRequired,\n    foodID: PropTypes.number.isRequired,\n};\n\nFoodsDeleteButton.defaultProps = {\n    foodID: 1,\n};\n\nexport default FoodsDeleteButton;\n","// import core\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\n// get props from FoodsList.jsx\nfunction FoodsEditButton({ foodID }) {\n    return (\n        <Link to={`aliments/${foodID}`}>\n            <button>O</button>\n        </Link>\n    );\n}\n\nFoodsEditButton.propTypes = {\n    foodID: PropTypes.number.isRequired,\n};\n\nFoodsEditButton.defaultProps = {\n    foodID: 1,\n};\n\nexport default FoodsEditButton;\n","// import core\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// import components\nimport FoodsAdd from \"./FoodsAdd\";\nimport FoodsDeleteButton from \"./FoodsDeleteButton\";\nimport FoodsEditButton from \"./FoodsEditButton\";\n\n// import style\n\n// get props from Foods.jsx\nfunction FoodsList({ foodsList, getFoodsList }) {\n    function SwitchCategories(switcher) {\n        switch (switcher) {\n            case 1:\n                return \"féculents\";\n            case 2:\n                return \"animales\";\n            case 3:\n                return \"végétales\";\n            case 4:\n                return \"céréales\";\n            case 5:\n                return \"légumineuse\";\n            case 6:\n                return \"laitier\";\n            default:\n                break;\n        }\n    }\n\n    const foods = foodsList.map((food, index) => (\n        <tr key={index}>\n            <td>{food.id}</td>\n            <td>{food.name}</td>\n            <td>{food.protein}</td>\n            <td>{food.lipid}</td>\n            <td>{food.glucid}</td>\n            <td>{food.bran}</td>\n            <td>{food.calories}</td>\n            <td>{SwitchCategories(food.id_group)}</td>\n            <td>\n                <FoodsEditButton foodID={food.id} />\n            </td>\n            <td>\n                <FoodsDeleteButton\n                    getFoodsList={getFoodsList}\n                    foodID={food.id}\n                />\n            </td>\n        </tr>\n    ));\n\n    return (\n        <Fragment>\n            <table>\n                <thead>\n                    <tr>\n                        <td>#</td>\n                        <td>Nom</td>\n                        <td>Protéines</td>\n                        <td>Lipides</td>\n                        <td>Glucides</td>\n                        <td>Fibres</td>\n                        <td>Calories pour 100g</td>\n                        <td>Catégorie</td>\n                        <td>Editer</td>\n                        <td>Effacer</td>\n                    </tr>\n                </thead>\n                <tbody>{foods}</tbody>\n            </table>\n            {/* TODO si Editer est cliqué on switch sur FoodsUpdate sinon on reste sur FoodAdd */}\n            <FoodsAdd getFoodsList={getFoodsList} />\n        </Fragment>\n    );\n}\n\nFoodsList.propTypes = {\n    foodsList: PropTypes.arrayOf(\n        PropTypes.objectOf(\n            PropTypes.shape({\n                id: PropTypes.number,\n                name: PropTypes.string,\n                protein: PropTypes.number,\n                lipid: PropTypes.number,\n                glucid: PropTypes.number,\n                bran: PropTypes.number,\n                calories: PropTypes.number,\n                id_group: PropTypes.number,\n            })\n        )\n    ),\n    getFoodsList: PropTypes.func.isRequired,\n};\n\nFoodsList.defaultProps = {\n    foodsList: [\n        {\n            id: 1,\n            name: \"cammembert\",\n            protein: 30,\n            lipid: 50,\n            glucid: 5,\n            bran: 0,\n            calories: 590,\n            id_group: 2,\n        },\n    ],\n};\nexport default FoodsList;\n","// import core\nimport React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\n\n// import components\nimport FoodsList from \"./FoodsList\";\n\n// import style\n\nfunction Foods() {\n    const [foodsList, setFoodsList] = useState([{}]);\n\n    const getFoodsList = () => {\n        const url = `${process.env.REACT_APP_HOST}/foods`;\n        Axios.get(url)\n            .then((response) => response.data)\n            .then((data) => setFoodsList(data));\n    };\n\n    useEffect(() => {\n        getFoodsList();\n    }, []);\n\n    return <FoodsList foodsList={foodsList} getFoodsList={getFoodsList} />;\n}\n\nexport default Foods;\n","// import core\nimport React, { Fragment } from 'react';\n\nfunction Meals() {\n  return (\n    <Fragment>\n      <h1>Meals Component</h1>\n    </Fragment>\n  );\n}\n\nexport default Meals;","// import core\nimport React, { Fragment } from 'react';\n\nfunction Planning() {\n  return (\n    <Fragment>\n      <h1>Planning Component</h1>\n    </Fragment>\n  );\n}\n\nexport default Planning;","import React, { useState, useEffect, useContext, Fragment } from \"react\";\nimport Axios from \"axios\";\n\nfunction Recipes() {\n    const calories = useContext(TestContext);\n\n    const [allFoods, setAllFoods] = useState([{}]);\n    const [food, setFood] = useState([{}]);\n    const [foodQuantity, setFoodQuantity] = useState(0);\n\n    const getAllFoods = () => {\n        const url = `${process.env.REACT_APP_HOST}/foods`;\n        Axios.get(url)\n            .then((response) => response.data)\n            .then((data) => setAllFoods(data));\n    };\n    useEffect(() => {\n        return getAllFoods();\n    }, []);\n\n    const getOneFood = (foodId) => {\n        const url = `${process.env.REACT_APP_HOST}/foods/{foodId}`;\n        Axios.get(url)\n            .then((response) => response.data)\n            .then((data) => setFood(data));\n    };\n    useEffect(() => {\n        getOneFood();\n    }, [allFoods]);\n\n    const getFoodName = allFoods.map((foodDetail) => (\n        <button onClick={() => getOneFood(foodDetail.id)}>\n            <div>{foodDetail.name}</div>\n        </button>\n    ));\n\n    const calcFoodQuantity = () => {\n        const total = 100 * (calories / food.calories);\n        setFoodQuantity(total.toFixed(2));\n    };\n    /* TODO\n    ajouter une liste d'ingrédient à la recette\n    et retourner la quantité necessaire en grammes de chaque ingrédient pour atteindre\n    la DEJ\n    ex:\n     pâtes seulement => retourne environ 500g pour 2000cals\n     pâtes + gruyère => si 50/50 = 280g de pâtes et 257g de gruyère\n    */\n\n    /* TODO 2\n    même idée déquilibrage mais sans dépasser la quantité de prot, lip, gluc recommendée\n\n    ex: 500g de pâtes =\n    347g de glucides environ ( contre 150 max environ) => c'est beaucoup trop!!!\n    8g de lipides environ (contre 89g max environ) => c'est carrément pas assez !!!\n    72g de proteines eniron (contre 160g maw environ) => on est qu'à la moitié\n\n    Alors, un peut :\n    ajouter un peu d'huile d'olive pour combler le manque de lipides\n    ajouter des blanc d'oeuf pour combler le manque de proteines\n    baisser la quantité de pâtes pour enlever l'exès de glucides\n\n    */\n\n    /* TODO 3\n     à chaque ajout ou retrait d'aliment , les quantité doivent être affichées\n     automatiquement le but étant de choisir que ses aliments et de ne rien avoir à calculer.\n    */\n    // console.log(\"value\", energyConsuption);\n\n    return (\n        <Fragment>\n            <div container spacing={1}>\n                {getFoodName}\n            </div>\n            <p variant=\"h2\" gutterBottom>\n                Calculer une recette pour {calories} calories\n            </p>\n            <div>\n                <p>{food.name}</p>\n                <p>{food.calories} cals</p>\n            </div>\n            <div>\n                <button onClick={() => calcFoodQuantity()}>Calculer</button>\n                <p>\n                    il vous faut {foodQuantity} grammes de {food.name} pour\n                    atteindre votre dépense énergétique journalière\n                </p>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Recipes;\n","// import core\nimport React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Menu() {\n    return (\n        <Fragment>\n            <div>\n                <Link to=\"/\">\n                    <button>Mes infos</button>\n                </Link>\n                <Link to=\"/aliments\">\n                    <button>Mes aliments</button>\n                </Link>\n                <Link to=\"/recettes\">\n                    <button>Mes recettes</button>\n                </Link>\n                <Link to=\"/repas\">\n                    <button>Mes repas</button>\n                </Link>\n                <Link to=\"/planning\">\n                    <button>Mon planning de la semaine</button>\n                </Link>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Menu;\n","// import core\nimport React, {\n    useState,\n    useEffect,\n    createContext,\n    useContext,\n    Fragment,\n} from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Axios from \"axios\";\n\n// import components\nimport Recipes from \"./Recipes/Recipes\";\nimport Menu from \"./Menu\";\n\n// import style\n\n/*\nFemmes :   \\mathrm{MB} = 0,963 * Poid^0,48 * Taille^0,50 * Age^-0,13\nHommes :   \\mathrm{MB} = 1,083 * Poid^0,48 * Taille^0,50 * Age^-0,13\nUne fois la formule effectuée, vous la multipliez par 191 et vous obtenez votre\nmétabolisme de base.\nSédentaire : MB x 1,4\nActif: MB x 1,6\nSportif: MB x 1,7*/\n\n\nfunction User() {\n\n    /* get all users */\n    const [allUsers, setAllUsers] = useState([{}]);\n    const getAllUsers = () => {\n        const url = `${process.env.REACT_APP_HOST}/users`;\n        Axios.get(url)\n            .then((response) => response.data)\n            .then((data) => setAllUsers(data));\n    };\n\n    useEffect(() => {\n        return getAllUsers();\n    }, []);\n\n    /* get one user */\n    const [user, setUser] = useState([{}]);\n    const getOneUser = (userId) => {\n        const url = `${process.env.REACT_APP_HOST}/users/${userId}`;\n        Axios.get(url)\n            .then((response) => response.data)\n            .then((data) => setUser(data));\n    };\n\n    useEffect(() => {\n        getOneUser();\n    }, [allUsers]);\n\n    /* init energy */\n    const [energyConsuption, setEnergyConsuption] = useState({});\n    const calcDailyEnergyConsumption = () => {\n        // for a male\n        const basalMetabolicRate =\n            1.083 *\n            Math.pow(weight, 0.48) *\n            Math.pow(height, 0.5) *\n            Math.pow(age, -0.13) *\n            191;\n        const dailyEnergyConsumption = basalMetabolicRate * activity;\n\n        return setEnergyConsuption({\n            mb_rate: basalMetabolicRate.toFixed(2),\n            daily_energy: dailyEnergyConsumption.toFixed(2),\n        });\n    };\n\n    useEffect(() => {\n        calcDailyEnergyConsumption();\n    }, [user]);\n\n    /* init Proteins, Lipids, Glucids state */\n    const [PLG, setPLG] = useState({});\n\n    /* init info needed by user */\n    const weight = user.weight;\n    const height = user.height;\n    const age = user.age;\n    const activity = 1.4;\n\n    /* calculate proteins / lipids / glucids ratio */\n    const calcLipGlucProt = () => {\n        // DEC means Daily Energy Consuption\n        let DEC = energyConsuption.daily_energy;\n\n        const proteins = user.weight * 1.8;\n        DEC = DEC - proteins * 4;\n\n        const lipids = user.weight * 1;\n        DEC = DEC - lipids * 9;\n\n        const glucids = DEC / 4;\n\n        return setPLG({\n            proteins: proteins.toFixed(2),\n            lipids: lipids.toFixed(2),\n            glucids: glucids.toFixed(2),\n        });\n    };\n\n    useEffect(() => {\n        calcLipGlucProt();\n    }, [energyConsuption]);\n\n    return (\n        <Fragment>\n                <div>\n                    {allUsers.map((userDetail) => (\n                        <div>\n                            <div>\n                                <button\n                                    onClick={() => getOneUser(userDetail.id)}\n                                >\n                                    {userDetail.id} {userDetail.firstname}\n                                </button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n                <div>\n                    <p>{`Bonjour ${user.firstname} ${user.lastname}`}</p>\n                    <hr />\n                    <p>age : {user.age} ans</p>\n                    <p>taille : {user.height} m</p>\n                    <p>poid : {user.weight} kg</p>\n                    <p>activité : {user.id_activity} (sédentaire)</p>\n                    <p>objectif : {user.id_goal}(perdre du poid)</p>\n                    <hr />\n                    <p>\n                        Votre <u>métabolisme basal</u> est de\n                        <strong> {energyConsuption.mb_rate} calories</strong> et\n                        votre <u>dépense énergétique journalière</u> est de\n                        <strong>\n                            {energyConsuption.daily_energy} calories\n                        </strong>\n                    </p>\n                    <p>\n                        Vous devez consommer idéalement\n                        <ul>\n                            <li href=\"#simple-list\">\n                                - {PLG.proteins} grammes de protéines\n                            </li>\n                            <li href=\"#simple-list\">\n                                - {PLG.lipids} grammes de lipides\n                            </li>\n                            <li href=\"#simple-list\">\n                                - {PLG.glucids} grammes de glucides\n                            </li>\n                        </ul>\n                    </p>\n                    <hr />\n                    <p variant=\"caption\" display=\"block\" gutterBottom>\n                        Ces informations ne remplace en aucun cas l'avis médical\n                        d'un expert.\n                    </p>\n                </div>\n                <div>\n                    <button size=\"small\">Mettre à jour mes infos</button>\n                </div>\n                <Menu />\n                <Switch>\n                    <Route path=\"/recettes\" component={Recipes} />\n                </Switch>\n        </Fragment>\n    );\n}\n\nexport default User;\n","// import core\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Form({ children }) {\n    return <form>{children}</form>;\n}\n\nfunction FieldSet({ children }) {\n    return <fieldset>{children}</fieldset>;\n}\n\nfunction Legend({ text }) {\n    return <legend>{text}</legend>;\n}\n\nfunction Label({ htmlFor, text }) {\n    return <label htmlFor={htmlFor}>{text}</label>;\n}\n\nfunction Input({ id, name, type, value, onChange, placeholder, min, max }) {\n    return (\n        <input\n            id={id}\n            name={name}\n            type={type}\n            value={value}\n            onChange={onChange}\n            placeholder={placeholder}\n            min={min}\n            max={max}\n        />\n    );\n}\nfunction Select({ id, name, value, onChange, children }) {\n    return (\n        <select id={id} name={name} value={value} onChange={onChange}>\n            {children}\n        </select>\n    );\n}\n\nfunction Options({ value, text }) {\n    return <option value={value}>{text}</option>;\n}\n\nfunction Button({ onClick, text }) {\n    return <button onClick={onClick}>{text}</button>;\n}\n\n// PropTypes\nForm.propTypes = {\n    children: PropTypes.node,\n};\nForm.defaultProps = {\n    children: PropTypes.node,\n};\nFieldSet.propTypes = {\n    children: PropTypes.node,\n};\nFieldSet.defaultProps = {\n    children: PropTypes.node,\n};\n\nLegend.propTypes = {\n    text: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n};\nLegend.defaultProps = {\n    text: \"ma légende\",\n};\n\nLabel.propTypes = {\n    htmlFor: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n    text: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n};\nLabel.defaultProps = {\n    htmlFor: \"name\",\n    text: \"mon label\",\n};\n\nInput.propTypes = {\n    id: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n    name: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.oneOf([\"text\", \"number\", \"search\"]),\n    value: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n    placeholder: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    min: PropTypes.number,\n    max: PropTypes.number,\n};\n\nInput.defaultProps = {\n    id: \"name\",\n    name: \"name\",\n    type: \"text\",\n    value: null,\n    placeholder: \"ex: 06 50 51 52 53 \",\n    min: 0,\n    max: 300,\n};\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    text: PropTypes.string.isRequired,\n};\n\nButton.defaultProps = {\n    text: \"clic me!\",\n};\nSelect.propTypes = {\n    id: PropTypes.number.isRequired,\n    name: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n    value: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    children: PropTypes.node,\n};\n\nSelect.defaultProps = {\n    id: \"category\",\n    name: \"id_group\",\n    value: \"\",\n    onChange: PropTypes.func,\n    children: PropTypes.node,\n};\nOptions.propTypes = {\n    value: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n    text: PropTypes.oneOfType([\n        PropTypes.number.isRequired,\n        PropTypes.string.isRequired,\n    ]),\n};\n\nOptions.defaultProps = {\n    value: \"\",\n    text: \"--Choisissez une catégorie--\",\n};\nexport { Form, FieldSet, Legend, Label, Input, Button, Select, Options };\n","// import core\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport Axios from \"axios\";\nimport { Link, useParams } from \"react-router-dom\";\n\n// import component\nimport {\n    Form,\n    FieldSet,\n    Legend,\n    Label,\n    Input,\n    Button,\n    Select,\n    Options,\n} from \"../Form/Form\";\n\nfunction FoodsUpdate() {\n    const { foodID } = useParams(null);\n    const [food, setFood] = useState({});\n\n    const getFood = (foodID) => {\n        const url = `${process.env.REACT_APP_HOST}/foods/${foodID}`;\n        Axios.get(url)\n            .then((response) => response.data)\n            .then((data) => setFood(data));\n    };\n\n    const updateFood = (foodID) => {\n        const url = `${process.env.REACT_APP_HOST}/foods/${foodID}`;\n        Axios.put(url, food)\n            .then((response) => response.data)\n            .then((data) => data);\n        return alert(`l' aliment \"${food.name}\" est bien mis à jour`);\n    };\n\n    useEffect(() => {\n        getFood(foodID);\n    }, [foodID]);\n\n    const handleChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n        const updatedFoodInfos = { ...food, [name]: value };\n        return setFood(updatedFoodInfos);\n    };\n\n    return (\n        <Fragment>\n            <Form method=\"PUT\" onSubmit={() => updateFood(foodID)}>\n                <FieldSet>\n                    <Legend text=\"Editer un aliment\" />\n                    <Label htmlFor=\"food name\" text=\"Name:\" />\n                    <Input\n                        id=\"food name\"\n                        value={food.name}\n                        onChange={(event) => handleChange(event)}\n                    />\n                    <Label htmlFor=\"proteins\" text=\"Protéines:\" />\n                    <Input\n                        id=\"proteins\"\n                        name=\"protein\"\n                        type=\"number\"\n                        value={food.protein}\n                        onChange={(event) => handleChange(event)}\n                    />\n                    <Label htmlFor=\"lipids\" text=\"Lipides:\" />\n                    <Input\n                        id=\"lipids\"\n                        name=\"lipid\"\n                        type=\"number\"\n                        value={food.lipid}\n                        onChange={(event) => handleChange(event)}\n                    />\n                    <Label htmlFor=\"glucids\" text=\"Glucides\" />\n                    <Input\n                        id=\"glucids\"\n                        name=\"glucid\"\n                        type=\"number\"\n                        value={food.glucid}\n                        onChange={(event) => handleChange(event)}\n                    />\n                    <Label htmlFor=\"brans\" text=\"Fibres:\" />\n                    <Input\n                        id=\"brans\"\n                        name=\"bran\"\n                        type=\"number\"\n                        value={food.bran}\n                        onChange={(event) => handleChange(event)}\n                    />\n                    <Label htmlFor=\"cals\" text=\"Calories:\" />\n                    <Input\n                        id=\"cals\"\n                        name=\"calories\"\n                        type=\"number\"\n                        value={food.calories}\n                        onChange={(event) => handleChange(event)}\n                    />\n                    <Label htmlFor=\"category\" text=\"Catégorie:\" />\n                    <Select\n                        value={food.id_group}\n                        onChange={(event) => handleChange(event)}\n                    >\n                        <Options />\n                        <Options value={1} text=\"féculent\" />\n                        <Options value={2} text=\"animale\" />\n                        <Options value={3} text=\"végétale\" />\n                        <Options value={4} text=\"céréales\" />\n                        <Options value={5} text=\"légumineuse\" />\n                        <Options value={6} text=\"laitier\" />\n                    </Select>\n                </FieldSet>\n            </Form>\n            <Button onClick={() => updateFood(foodID)} text=\"mettre à jour\" />\n            <Link to=\"/aliments\">\n                <Button text=\"retour\" />\n            </Link>\n        </Fragment>\n    );\n}\n\nexport default FoodsUpdate;\n","// import core\nimport React, { Fragment } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\n// import components\nimport Foods from \"./components/Foods/Foods\";\nimport Meals from \"./components/Meals/Meals\";\nimport Planning from \"./components/Planning/Planning\";\nimport Users from \"./components/Users\";\nimport FoodsUpdate from \"./components/Foods/FoodsUpdate\";\n\nfunction App() {\n    return (\n        <Fragment>\n            <Users />\n            <Switch>\n                <Route exact path=\"/aliments\" component={Foods} />\n                <Route path=\"/aliments/:foodID\" component={FoodsUpdate} />\n                <Route path=\"/repas\" component={Meals} />\n                <Route path=\"/planning\" component={Planning} />\n            </Switch>\n        </Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <Router>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Router>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}